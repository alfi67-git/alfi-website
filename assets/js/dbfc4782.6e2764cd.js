"use strict";(self.webpackChunkalfi=self.webpackChunkalfi||[]).push([[8749],{1895:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"pfe-ansible","metadata":{"permalink":"/blog/pfe-ansible","editUrl":"https://github.com/alfi67-git/alfi-website/blog/pfe/2025/index.md","source":"@site/blog/pfe/2025/index.md","title":"\ud83c\udf93 Projet de Fin d\'\xc9tude 3e ann\xe9e | D\xe9ploiement automatique de config switch avec Ansible","description":"Rebelote, pour la validation de ma 3e ann\xe9e d\'\xe9tude, je dois r\xe9aliser un nouveau projet. Cette fois-ci \xe7a sera sur l\'automatisation du d\xe9ploiement de fichier de configuration de switch \xe0 l\'aide d\'Ansible.","date":"2025-02-04T19:02:00.000Z","tags":[{"inline":false,"label":"CESI","permalink":"/blog/tags/cesi","description":"Tous les articles en rapport \xe0 l\'\xe9cole CESI."},{"inline":false,"label":"PFE","permalink":"/blog/tags/pfe","description":"Tous les articles concernant mes projets de fin d\'\xe9tude."}],"readingTime":4.09,"hasTruncateMarker":true,"authors":[{"name":"Alexandre FIDALGO","title":"J\'fais des trucs sur mon pc et mes serveurs","socials":{"github":"https://github.com/alfi67-git","linkedin":"https://www.linkedin.com/in/alexandre-fidalgo/","email":"mailto:a.fidalgo.contact@gmail.com"},"imageURL":"https://github.com/alfi67-git.png","key":"alfi","page":null}],"frontMatter":{"slug":"pfe-ansible","title":"\ud83c\udf93 Projet de Fin d\'\xc9tude 3e ann\xe9e | D\xe9ploiement automatique de config switch avec Ansible","authors":["alfi"],"tags":["cesi","pfe"],"date":"2025-02-04T19:02"},"unlisted":false,"nextItem":{"title":"\ud83d\udee0\ufe0f Installer et monitorer un serveur minecraft avec Crafty Controller","permalink":"/blog/crafty"}},"content":"Rebelote, pour la validation de ma 3e ann\xe9e d\'\xe9tude, je dois r\xe9aliser un nouveau projet. Cette fois-ci \xe7a sera sur l\'automatisation du d\xe9ploiement de fichier de configuration de switch \xe0 l\'aide d\'Ansible.\\n\\n:::warning\\nCet article est encore en cours de r\xe9daction, le projet venant juste de commenc\xe9. N\'h\xe9sitez pas \xe0 revenir plus tard pour voir l\'\xe9volution du projet.\\n:::\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\nCe projet doit permettre :\\n- L\'automatisation de d\xe9ploiement de script de configuration de switch\\n- La mise \xe0 jour automatique des fichiers de conf\\n- Sauvegarder les fichiers de configuration sur Git\\n- Permettre le rollback en cas de d\xe9faillance\\n\\n## Technologies utilis\xe9es\\n\\n### \ud83d\udd17 Git, c\'est quoi ?\\n\\nGit est un **syst\xe8me de gestion de versions** qui permet de **suivre l\u2019\xe9volution des fichiers** dans un projet, principalement du code source.\\n\\nAvec Git, tu peux :\\n\\n\u2705 **Sauvegarder et suivre les modifications** d\u2019un projet au fil du temps\\n\\n\u2705 **Revenir \xe0 une version pr\xe9c\xe9dente** en cas d\u2019erreur\\n\\n\u2705 **Travailler \xe0 plusieurs** sans \xe9craser les modifications des autres\\n\\n\u2705 **Exp\xe9rimenter avec des branches** avant d\u2019int\xe9grer des changements dans le projet principal\\n\\nGit est un outil **distribu\xe9**, c\u2019est-\xe0-dire que **chaque copie du projet contient tout l\u2019historique des modifications**, sans d\xe9pendre d\u2019un serveur central.\\n\\n### \u2699\ufe0f Ansible, c\'est quoi ?\\n\\nAnsible est un **outil d\'automatisation** qui permet de **g\xe9rer des serveurs, installer des logiciels et configurer des syst\xe8mes** de mani\xe8re simple et efficace.\\n\\nAvec Ansible, tu peux :\\n\\n\u2705 **G\xe9rer plusieurs machines en m\xeame temps** avec un seul script\\n\\n\u2705 **Automatiser les t\xe2ches r\xe9p\xe9titives** comme l\u2019installation de logiciels\\n\\n\u2705 **\xc9viter les erreurs humaines** gr\xe2ce \xe0 des configurations reproductibles\\n\\n\u2705 **Utiliser un syst\xe8me sans agent**, car Ansible fonctionne via **SSH** (pour Linux) et **WinRM** (pour Windows)\\n\\nAnsible est **d\xe9claratif** : tu \xe9cris ce que tu veux obtenir (ex: \\"Apache install\xe9\\"), et il s\u2019occupe du comment.\\n\\n#### Comment \xe7a marche ?\\n\\n1. **Machine de contr\xf4le** : Un serveur o\xf9 Ansible est install\xe9 (peut \xeatre ton PC ou un serveur d\xe9di\xe9).\\n2. **Machines cibles** : Serveurs \xe0 configurer, accessibles en SSH.\\n3. **Inventaire** : Un fichier listant les machines cibles.\\n4. **Playbooks** : Scripts YAML d\xe9finissant les actions \xe0 ex\xe9cuter (installer un package, modifier un fichier, red\xe9marrer un service, etc.).\\n\\n```yaml\\n- name: Installer Apache\\n  hosts: webservers\\n  become: yes  # Ex\xe9cuter en tant que root\\n  tasks:\\n    - name: Installer le package Apache\\n      apt:\\n        name: apache2\\n        state: present\\n```\\n\ud83d\udc49 Ici, Ansible va se connecter aux machines du groupe webservers et installer Apache.\\n\\nPour rentrer un peu plus dans les d\xe9tails, Ansible automatise la gestion des syst\xe8mes distants et contr\xf4le leur \xe9tat souhait\xe9.\\n\\n![control node ansible](./images/ansible_inv_start.svg)\\n\\nComme montr\xe9 dans la figure pr\xe9c\xe9dente, la plupart des environnements Ansible comportent trois composants principaux :\\n\\n**N\u0153ud de contr\xf4le :**\\n\\nUn syst\xe8me sur lequel Ansible est install\xe9. Vous ex\xe9cutez les commandes Ansible telles que `ansible` ou `ansible-inventory` sur un n\u0153ud de contr\xf4le.\\n\\n**Inventaire :**\\n\\nUne liste de n\u0153uds g\xe9r\xe9s qui sont organis\xe9s de mani\xe8re logique. Vous cr\xe9ez un inventaire sur le n\u0153ud de contr\xf4le pour d\xe9crire les d\xe9ploiements d\'h\xf4tes \xe0 Ansible.\\n\\n**N\u0153ud g\xe9r\xe9 :**\\n\\nUn syst\xe8me distant, ou h\xf4te, qu\'Ansible contr\xf4le.\\n\\n## Premiers test\\n\\nEtant donn\xe9e que c\'est la premi\xe8re fois que j\'utilise Ansible, il faut bien que je puisse me faire la main dessus et comprendre comment \xe7a fonctionne. Pour ce faire j\'ai donc cr\xe9er un petit lab de VMs sur VMware Workstation.\\n\\nPour r\xe9aliser ce lab j\'ai donc poser la question \xe0 ChatGPT de m\'en proposer une et voici sa r\xe9ponse :\\n\\n#### \ud83d\udda5 Configuration minimale (3 VMs)\\n\\n1. **1 VM de contr\xf4le** (o\xf9 Ansible est install\xe9)\\n2. **2 VMs cibles** (serveurs g\xe9r\xe9s par Ansible)\\n\\n\ud83d\udc49 **Pourquoi ce setup ?**\\n\\n- 1 machine pour ex\xe9cuter Ansible\\n- 2 machines cibles pour tester l\'ex\xe9cution sur plusieurs serveurs\\n\\n#### \ud83c\udfd7 Configuration recommand\xe9e (4+ VMs)\\n\\nSi tu veux tester diff\xe9rents r\xf4les et services, voici une config plus avanc\xe9e :\\n\\n1. **1 VM \\"Control Node\\"** (Fedora/Debian/Ubuntu) \u2192 Contient Ansible\\n2. **1 VM \\"Web Server\\"** (Ubuntu/Debian/CentOS) \u2192 Pour tester le d\xe9ploiement d\u2019Apache/Nginx\\n3. **1 VM \\"Database Server\\"** (Ubuntu/Debian/CentOS) \u2192 Pour tester l\u2019installation de MySQL/PostgreSQL\\n4. **1 VM \\"Client\\"** (Fedora/Debian) \u2192 Pour tester la connexion aux services\\n\\n\\n### \ud83d\udccc Le lab :\\nVoici donc l\'\xe9tat du lab actuellement : \\n\\n1. **1 VM de contr\xf4le** (OS Fedora Server o\xf9 Ansible est install\xe9)\\n2. **2 VMs cibles** (OS Debian serveurs g\xe9r\xe9s par Ansible)\\n\\n\ud83d\udc49 **Pourquoi ce setup ?**\\n\\n- 1 machine pour ex\xe9cuter Ansible\\n- 2 machines cibles pour tester l\'ex\xe9cution sur plusieurs serveurs\\n\\n\\n### \ud83c\udf10 IP du lab :\\n\\n\u2705 **vm-fedo-ansible \u2192** 192.168.2.134\\n\\n\u2705 **vm-deb-ansible   \u2192** 192.168.2.135\\n\\n\u2705 **vm-deb-ansible2 \u2192** 192.168.2.136\\n\\n![15629187859594_Capture d\u2019e\xb4cran 2019-07-12 a` 10.05.31.png](./images/15629187859594_Capture_decran_2019-07-12_a_10.05.31.png)\\n\\n### \ud83d\udca1 Infos sur Ansible :\\n\\n![15629296318823_Plan de travail 12@2x.png](./images/15629296318823_Plan_de_travail_122x.png)\\n\\n> Un **node manager**, ou ***control node***,  est un poste qui contr\xf4le les nodes gr\xe2ce \xe0 sa connexion SSH. Il\xa0dispose d\'une version Ansible d\u2019install\xe9 pour leur pousser les t\xe2ches d\u2019automatisation gr\xe2ce aux commandes\xa0`ansible`\xa0et\xa0`ansible-playbook`. \xc7a peut \xeatre n\u2019importe quelle machine Linux, mais pas Windows.\\n\\n![15629302942908_Plan de travail 12 copie 4@2x.png](./images/15629302942908_Plan_de_travail_12_copie_42x.png)\\n\\n> Un **node** (ou ***managed node***, ou ***host***) est un poste connect\xe9 au node manager en SSH, et sur lequel Ansible viendra pousser les t\xe2ches d\u2019automatisation. Ansible n\u2019est pas install\xe9 sur les nodes."},{"id":"crafty","metadata":{"permalink":"/blog/crafty","editUrl":"https://github.com/alfi67-git/alfi-website/blog/projet-perso/crafty/index.md","source":"@site/blog/projet-perso/crafty/index.md","title":"\ud83d\udee0\ufe0f Installer et monitorer un serveur minecraft avec Crafty Controller","description":"Aujourd\'hui, on va voir comment installer un serveur Minecraft et le monitorer avec une interface web nomm\xe9 Crafty Controller le tout fonctionnant sous Docker install\xe9 sur un serveur Debian.","date":"2024-11-19T15:05:12.000Z","tags":[{"inline":false,"label":"Docker","permalink":"/blog/tags/docker","description":"Docker tag description."},{"inline":false,"label":"Minecraft","permalink":"/blog/tags/minecraft","description":"Tous les articles en lien avec Minecraft."},{"inline":false,"label":"Projets personnels","permalink":"/blog/tags/projets","description":"Mes p\'tits projets perso, c\'est ici."}],"readingTime":5.16,"hasTruncateMarker":true,"authors":[{"name":"Alexandre FIDALGO","title":"J\'fais des trucs sur mon pc et mes serveurs","socials":{"github":"https://github.com/alfi67-git","linkedin":"https://www.linkedin.com/in/alexandre-fidalgo/","email":"mailto:a.fidalgo.contact@gmail.com"},"imageURL":"https://github.com/alfi67-git.png","key":"alfi","page":null}],"frontMatter":{"slug":"crafty","title":"\ud83d\udee0\ufe0f Installer et monitorer un serveur minecraft avec Crafty Controller","authors":["alfi"],"tags":["docker","minecraft","projets"],"date":"2024-11-19T15:05:12.000Z"},"unlisted":false,"prevItem":{"title":"\ud83c\udf93 Projet de Fin d\'\xc9tude 3e ann\xe9e | D\xe9ploiement automatique de config switch avec Ansible","permalink":"/blog/pfe-ansible"},"nextItem":{"title":"\ud83c\udf93 Projet de Fin d\'\xc9tude | Utilisation de Postman","permalink":"/blog/pfe-premier-pas"}},"content":"Aujourd\'hui, on va voir comment installer un serveur Minecraft et le monitorer avec une interface web nomm\xe9 *Crafty Controller* le tout fonctionnant sous Docker install\xe9 sur un serveur Debian.\\n\\n\x3c!--truncate--\x3e\\n## Les outils utilis\xe9s\\n### C\'est quoi [Docker](https://docker.com) ?\\nPour faire ultra simple, docker est une application de virtualisation.\\nDe la m\xeame fa\xe7on que l\'on peut virtualiser des Syst\xe8mes d\'Exploitations, avec VirtualBox, VMware, etc, avec Docker on peut virtualiser des applications.\\nUtiliser Docker \xe0 plusieurs avantages pour ce projet:\\n- Se d\xe9ployer rapidement \\n- Isoler l\'environnements\\n- La portabilit\xe9\\n\\n### C\'est quoi [Crafty](https://craftycontrol.com) ?\\nCrafty Controller, ou comme je l\'appelle plus simplement *Crafty*, est un projet gratuit et open-source, qui permet, \xe0 l\'aide d\'une interface web, d\'administrer un ou plusieurs serveur Minecraft.\\n\\n## Installation\\nC\'est possible d\'installer Crafty de diff\xe9rentes fa\xe7ons. Soit directement sur le syst\xe8me (mais c\'est chiant et \xe0 g\xe9rer c\'est un bordel, je le sais d\'exp\xe9rience) ou avec Docker et docker compose (qui pour le coup est beaucoup plus simple).\\n\\nPour son installation avec Docker, il y a diff\xe9rentes fa\xe7on de l\'installer. Que ce soit avec le CLI, avec le hub ou encore avec Docker Compose.\\n\\nVu que l\'\xe9quipe de Crafty proposent un fichier docker-compose tout pr\xeat, on va utiliser \xe7a.\\n\\nVoici donc le fichier de configuration de base pour Crafty.\\n```yml\\nversion: \'3\'\\n\\nservices:\\n  crafty:\\n    container_name: crafty_container\\n    image: registry.gitlab.com/crafty-controller/crafty-4:latest\\n    restart: always\\n    environment:\\n        - TZ=Etc/UTC\\n    ports:\\n        - \\"8443:8443\\" # HTTPS\\n        - \\"8123:8123\\" # DYNMAP\\n        - \\"19132:19132/udp\\" # BEDROCK\\n        - \\"25500-25600:25500-25600\\" # MC SERV PORT RANGE\\n    volumes:\\n        - ./docker/backups:/crafty/backups\\n        - ./docker/logs:/crafty/logs\\n        - ./docker/servers:/crafty/servers\\n        - ./docker/config:/crafty/app/config\\n        - ./docker/import:/crafty/import\\n```\\nOn va donc cr\xe9er un fichier du nom de `docker-compose.yml` et coller les recommendation des devs dans le fichier.\\n\\n:::info\\nBien penser \xe0 changer la time zone en : Etc/Europe.\\nJ\'ai d\xe9j\xe0 eu des soucis d\'horloge en ayant oubli\xe9 de changer ce param\xe8tre.\\n:::\\n\\n\\nOn va globalement pas trop toucher \xe0 ce fichier, qui est bien dans l\'ensemble. On peut donc lancer docker avec la commande: `docker-compose up -d && docker-compose logs -f`.\\n\\nVu que crafty est bien fait, l\'installation va se faire toute seule et prend normalement que quelques secondes\\n\\nOn peut d\'ailleurs voir sur la capture suivante l\'installation s\'effectuer:\\n![installation de crafty \xe0 l\'aide de docker](./images/docker1.png)\\n\\n## Interface de Crafty\\n### Premi\xe8re connexion\\nMaintenant que notre installation s\'est bien d\xe9roul\xe9e, il est temps d\'aller jeter un oeil au niveau de l\'interface web.\\nCrafty est accessible via `localhost`, `127.0.0.1` ou l\'`ip de la machine`. Mais toujours avec **https://** devant.\\nPour cet exemple j\'y acc\xe8de de avec la mani\xe8re `https://127.0.0.1:8443/`, mais en temps normal, je rentre l\'adresse ip du serveur o\xf9 est h\xe9berg\xe9 crafty.\\n\\nOn se retrouve donc face \xe0 set interface:\\n![page de connexion \xe0 crafty](./images/crafty_ui.png)\\n\\nPour une premi\xe8re connexion, il faut utiliser le username `admin` et le `mot de passe` g\xe9n\xe9rer dans un fichier situer ici : `app/config/default-creds.txt` de fa\xe7on g\xe9n\xe9ral. Mais bon, vu que je trouvais pas j\'ai fini par lanc\xe9 une recherche afin de trouver le fichier, qui finalement \xe9tait pas si loin que \xe7a:\\n![mot de passe de connexion session admin](./images/passwd.png)\\n\\n:::info\\n\xc0 chaque fois que j\'ai essay\xe9 d\'acc\xe8der au compte admin pour une premi\xe8re connexion, j\'ai TOUJOURS un message d\'erreur o\xf9 la connexion est impossible. Je sais pas si c\'est moi qui suis maudit ou si c\'est bugg\xe9 \ud83d\ude2e\u200d\ud83d\udca8.\\n:::\\n\\nCette fois-ci j\'avais un petit peu d\'espoir que \xe7a fonctionne, mais comme \xe0 chaque installation, j\'ai une erreur `Incorrect username or password`. Donc on va utiliser la m\xe9thode `Forgot Password` qui va activer un compte temporaire qui nous pemettra de d\xe9finir le mot de passe de notre choix pour le compte `admin`.\\n\\nLorsque l\'on clic sur le boutton `Forgot Password`, le compte `Lockout` s\'active pendant 1H avec un mot de passe temporaire, trouvable dans les logs du container:\\n`docker logs {id container}`\\n![login et password du compte auti-lockout](./images/lockout.png)\\n\\nUne fois ces identifiants rentr\xe9, cela nous donne donc acc\xe8s \xe0 l\'interface permettant de modifier le mot de passe admin.\\n\\nVoici \xe0 quoi elle ressemble:\\n![page de gestion auti-lockout](./images/ath_lockout.png)\\n\\n### Dashboard\\nMaintenant qu\'on est connect\xe9, nous voici face \xe0 la page d\'accueil. C\'est le dashboard.\\nD\'ici on peut acc\xe9der aux param\xe8tres et cr\xe9er des serveurs.\\nSi des serveurs sont cr\xe9es, ils s\'afficheront ici.\\n\\n![dashboard crafty](./images/interface_crafty.png)\\n\\n### Cr\xe9ation d\'un serveur\\nAvec Crafty, il est possible de choisir entre un serveur Minecraft Java ou Bedrock.\\nChoix \xe0 d\xe9finir en s\xe9lectionnant Minecraft-Bedrock ou Minecraft-Java au dessus du panneau **Create New Server**.\\n\\n---\\n\\nVoici l\'outil qui permet de cr\xe9er des serveurs. Il permet de s\xe9lectionner plusieurs options personnalisable pour notre serveur.\\n![cr\xe9er un nouveau serveur](./images/server-builder2.png)\\n1. **Server Type**: Permet de choisir entre soit la configuration du serveur minecraft ou d\'un serveur proxie.\\n2. **Server Select**: au fil des ann\xe9es, plusieurs type de serveur se sont cr\xe9er, *vanilla*, *paper*, *fabric*, *folia*, *forge-installer* et *purpur*. (Paper est recommand\xe9 si l\'installation de plugins est souhait\xe9)\\n3. **Server Version**: s\xe9lectionne la version du jeu sur lequel le serveur doit tourner.\\n4. **Server Name**: Nom que vous souhaitez donner au serveur (obvious celui-ci\u261d\ud83e\udd13).\\n5. **Minimum/Maximum Memory, Server Port**: D\xe9termine la minimum et le maximum de ram que vous souhaitez allouer au serveur. Vivement recommand\xe9 de mettre au minimum 2Go et 6Go au max pour une **bonne** utilisation entre ami.\\n\\n:::warning\\nBien penser \xe0 changer le port, des bots qui scannent les ports Minecraft sont fr\xe9quent. Exemple: Remplacer **25565** par **25570**.\\n:::\\n\\n### D\xe9marrage du serveur\\nOn peut maintenant d\xe9marrer le serveur en cliquant sur le bouton \'**Start**\' ou depuis le dashboard en appuyant sur le petit triangle.\\nSi c\'est le premier d\xe9marrage du serveur, il va demander d\'accepter les [EULA de Minecraft](https://www.minecraft.net/fr-fr/eula).\\n\\n![EULA Minecraft](./images/minecraft-eula.png)\\n\\nUne fois les EULA accept\xe9e on peut une nouvelle fois lancer le serveur et s\'assurer de bien avoir ouvert le port d\xe9fini plus haut qui est le port de connexion Minecraft et qui permettra \xe0 vos amis de se connecter \xe0 votre serveur.\\n\\n---\\n\\nEt voil\xe0, vous savez \xe0 pr\xe9sent installer Crafty Controller avec Docker et lancer votre premier serveur Minecraft !"},{"id":"pfe-premier-pas","metadata":{"permalink":"/blog/pfe-premier-pas","editUrl":"https://github.com/alfi67-git/alfi-website/blog/pfe/2024/index.md","source":"@site/blog/pfe/2024/index.md","title":"\ud83c\udf93 Projet de Fin d\'\xc9tude | Utilisation de Postman","description":"Dans le cadre de la validation de mon cursus d\'\xe9tude, je dois r\xe9aliser un projet de fin d\'\xe9tudes.","date":"2024-05-24T23:38:00.000Z","tags":[{"inline":false,"label":"CESI","permalink":"/blog/tags/cesi","description":"Tous les articles en rapport \xe0 l\'\xe9cole CESI."},{"inline":false,"label":"PFE","permalink":"/blog/tags/pfe","description":"Tous les articles concernant mes projets de fin d\'\xe9tude."}],"readingTime":7.09,"hasTruncateMarker":true,"authors":[{"name":"Alexandre FIDALGO","title":"J\'fais des trucs sur mon pc et mes serveurs","socials":{"github":"https://github.com/alfi67-git","linkedin":"https://www.linkedin.com/in/alexandre-fidalgo/","email":"mailto:a.fidalgo.contact@gmail.com"},"imageURL":"https://github.com/alfi67-git.png","key":"alfi","page":null}],"frontMatter":{"slug":"pfe-premier-pas","title":"\ud83c\udf93 Projet de Fin d\'\xc9tude | Utilisation de Postman","authors":["alfi"],"tags":["cesi","pfe"],"date":"2024-05-24T23:38"},"unlisted":false,"prevItem":{"title":"\ud83d\udee0\ufe0f Installer et monitorer un serveur minecraft avec Crafty Controller","permalink":"/blog/crafty"},"nextItem":{"title":"\ud83c\udf10 H\xe9berger son site gratuitement sur GitHub","permalink":"/blog/host-son-site-sur-github"}},"content":"Dans le cadre de la validation de mon cursus d\'\xe9tude, je dois r\xe9aliser un projet de fin d\'\xe9tudes.\\nProjet qui doit \xeatre r\xe9alis\xe9 au sein de l\'entreprise o\xf9 je me trouve.\\n\\nLe projet consiste \xe0 cr\xe9er une application Android qui permet, via l\'API de GLPI, de mettre \xe0 jour la base de donn\xe9es.\\n\\n:::info\\nCe projet est abandonn\xe9 et ne s\'est jamais fini, il n\'y aura donc pas de suite\\n:::\\n\\n\x3c!--truncate--\x3e\\n\\nL\'application devra :\\n\\n- \xcatre simple d\'utilisation\\n- Permettre d\'affecter un \xe9quipement un utilisateur\\n- Permettre de changer l\'affectation d\'un \xe9quipement \xe0 un utilisateur\\n- Changer le statut d\'un \xe9quipement\\n\\n## Technologies utilis\xe9es\\n\\n### Flutter\\nFlutter, c\'est un outil gratuit de Google qui te permet de cr\xe9er des applis pour mobile, web et ordinateur avec un seul code. En gros, tu \xe9cris ton code une fois et tu peux le faire tourner partout. Il utilise un langage appel\xe9 Dart, mais l\'important, c\'est que tu peux faire de super belles interfaces rapidement et facilement. C\'est super pratique pour avoir une appli qui marche bien et qui a le m\xeame look sur toutes les plateformes.\\n\\n### Postman\\nPostman, c\'est un outil super pratique pour tester des API. Tu peux envoyer des requ\xeates HTTP et voir les r\xe9ponses, sans avoir \xe0 \xe9crire du code compliqu\xe9. En gros, c\'est comme un couteau suisse pour les d\xe9veloppeurs qui bossent avec des API : tu peux tester, d\xe9boguer, et documenter tes endpoints super facilement. C\'est super utile pour v\xe9rifier que tout fonctionne bien avant de mettre en ligne ton application.\\n\\n### GLPI (dans un Docker)\\nGLPI, c\'est un outil open-source pour g\xe9rer tout ce qui concerne l\'informatique dans une entreprise. Il t\'aide \xe0 suivre les \xe9quipements, g\xe9rer les tickets de support, et organiser les t\xe2ches de maintenance. En gros, c\'est comme un tableau de bord pour tout ce qui touche \xe0 l\'IT : tu sais toujours ce qui se passe, o\xf9 sont tes ressources, et quelles sont les priorit\xe9s. Super utile pour garder tout en ordre et r\xe9soudre les probl\xe8mes rapidement.\\n\\nN\'ayant pas eu l\'autorisation de ma hi\xe9rarchie pour acc\xe9der \xe0 l\'API du GLPI de l\'entreprise, j\'en ai donc install\xe9 un en local gr\xe2ce \xe0 Docker sur mon pc personnel. \\n\\n---\\n\\n## Premiers pas\\nDans cette premi\xe8re partie, le but est de prendre en main *Postman* que j\'utiliserai durant ce projet, comme expliquer plus haut, pour faire des appels \xe0 l\'API de GLPI.\\n\\nComme c\'est la premi\xe8re fois que j\'utilise Postman, je ne comprends pas grand-chose, raison pour laquelle j\'ai une petite ToDo list.\\n\\nMon but, c\'est donc :\\n- D\'activer l\'API\\n- Faire mes premiers call avec Postman sur l\'API de GLPI\\n\\nC\'est pas beaucoup, mais \xe7a a \xe9t\xe9 un sacr\xe9 bordel, surtout au niveau de Postman.\\n\\n## Activer l\'API de GLPI\\n\\nRien de bien compliqu\xe9. Si vous avez un full acc\xe8s \xe0 votre GLPI, rendez vous dans *Configuration (1)* > *G\xe9n\xe9ral (2)* > *API (3)* > *Activer l\'API Rest (4)* > *Activer la connexion avec identifiants (5)* et enfin cliquez sur *Sauvegarder*\\n\\n![activer l\'api](./images/activation_api2.png)\\n\\nVoil\xe0, donc maintenant l\'API est activ\xe9, il faut ensuite rajouter un nouveau client de l\'API, c\'est le bouton qui se trouve juste en dessous.\\n\\nDonner un nom (1), ensuite d\xe9finir la plage d\'adresse IP qui sera utiliser par l\'API, ici, c\'est le range du Docker (2) et pour finir, faut s\'assurer que la case \\"*Reg\xe9n\xe9rer*\\" est coch\xe9e, ce qui permettra d\'avoir un jeton, on en aura besoin pour plus tard.\\n![activer l\'api](./images/client_api.png)\\n\\n### La documentation\\n\\nMaintenant que le client est cr\xe9\xe9 et que l\'API est activ\xe9e, il est temps de s\'y rendre.\\nDe retour sur la section consacr\xe9e \xe0 l\'API, il y a une ligne appel\xe9e *URL de l\'API* avec un lien vers celle-ci, qui est (dans mon cas): `http://localhost:8080/apirest.php/`\\n\\nEn se rendant sur cette page, on a donc acc\xe8s \xe0 la documentation compl\xe8te de l\'API, ce qui va \xeatre tr\xe8s utile par la suite avec Postman.\\n\\n## Utilisation de Postman\\n\\nPostman, \xe7a ressemble \xe0 \xe7a :\\n![postman](./images/postman.png)\\n\\nEn rouge, c\'est les requ\xeates HTTP. Celles qui nous int\xe9ressent sont :\\n- **GET** qui a pour but d\'aller chercher une page ou de la donn\xe9e.\\n- **POST** a pour but d\'envoyer de l\'information contenue dans le ***body*** de la requ\xeate, vers le serveur.\\n- **PUT** va \xe9craser une ressource avec de la nouvelle donn\xe9e, l\xe0 aussi d\xe9finie dans le ***body***.\\n- **DELETE** je pense pas avoir besoin d\'expliquer.\\n\\nEn jaune, c\'est l\'URL qui comporte toutes les *query* qui sont des donn\xe9es au format `cl\xe9=valeur` apr\xe8s un `?`.\\n\\n\\nPar exemple : `leboncoin.fr/recherche/?category=9&locations=r_12`\\n\\nLes champs *category* et *location* sont des *query*.\\n\\n### Premier call vers l\'API\\n\\nPour initialiser la premi\xe8re connexion, il faut d\'abord savoir quoi faire. Donc, direction la documentation, section ***Init session***. Cette requ\xeate va permettre de g\xe9n\xe9rer un token de session qui servira \xe0 l\'utilisation de l\'API. Pour g\xe9n\xe9rer cette requ\xeate, on va avoir besoin de certains param\xe8tres. Il y a le choix entre 2 solutions : \\n\\n- l\'utilisation d\'un *user_token* (qui est la m\xe9thode la plus simple) \\n\\n- l\'*App-Token* coupl\xe9 avec un *login* et *password*.\\n\\nOn va donc prendre la premi\xe8re option. \\n\\n:::info\\nPour r\xe9cup\xe9rer ce token, faut aller dans *Administration* > *Utilisateurs* > *\\\\{username\\\\}* et, tout en bas de la page, dans la section **Clef d\'acc\xe8s distant** doit appara\xeetre le *Jeton d\'API*. S\'il n\'est pas dispo, coche juste la case *Reg\xe9n\xe9r\xe9* \xe0 droite et clique sur *Sauvegarder*.\\n:::\\n\\nOn copie la cl\xe9 et on retourne sur Postman.\\n\\n![postman init session](./images/postman_initsession.png)\\n\\nFaut aller dans la section *Authorization* et dans le menu d\xe9roulant **Type** chercher ***API KEY***. Pour la Key, faut donc \xe9crire *user_token* et dans Value, coller la cl\xe9 copi\xe9e juste avant.\\n\\nEnsuite dans ***Params*** rajoute l\'**app_token** g\xe9n\xe9r\xe9 plus haut en activant l\'API.\\n\\nEt si tout est bon tu devrais dois un token de session qui appara\xeet dans le *Body* juste en dessous et qui se r\xe9g\xe9n\xe8re \xe0 chaque ex\xe9cusion de la commande.\\n\\nComme ceci:\\n![postman session token](./images/postman_session_token.png)\\n\\nCe token va \xeatre utile pour les autres commandes que je vais devoir ex\xe9cuter, donc faut le garder dans un coin.\\n\\n### Lister les tous les ordis\\n\\nPour que \xe7a puisse fonctionner, il faut bien \xe9videmment une liste d\'ordis cr\xe9\xe9s au pr\xe9alable. J\'en ai cr\xe9\xe9 4, on devrait donc en voir 4 de list\xe9.\\n\\nDonc le but, c\'est de lister tous les items, pour ce faire, direction la documentation une nouvelle fois dans la section **Get all items**. L\'url est `apirest.php/:itemtype/`. Il faut logicement remplacer `:itemtype` par `Computer` vu que c\'est ce que je cherche \xe0 afficher ici.\\n\\nl\'url devrait donc ressembler \xe0 un truc comme \xe7a : `http://localhost:8080/apirest.php/Computer`\\n\\n**Param\xe8tres :**\\n- Session-Token : qui est obligatoire.\\n- App-Token : qu\'est pas obligatoire, mais si je ne le mets pas \xe7a ne fonctionne pas...\\n- Session_token : c\'est pas indiqu\xe9 dans la doc, mais j\'ai un message d\'erreur si j\'le mets pas...\\n\\nApr\xe8s avoir ajout\xe9 tout \xe7a, et cliqu\xe9 sur **Send** j\'obtiens donc un r\xe9sultat, que voici :\\n![postman list d\'items](./images/postman_get_items.png)\\n\\nOkay ! Parfait, \xe7a fonctionne ! On va pouvoir passer \xe0 la suite, c-\xe0-d *ajouter* un nouvel ordinateur dans la liste.\\n\\n### Ajouter un nouvel ordinateur\\n\\nPour ajouter un objet, il va falloir changer le type de requ\xeate, faut passer en mode **POST**. L\'url reste le m\xeame qu\'avant, les param\xe8tres de query sont les m\xeames cependant maintenant faut d\xe9finir le pc qu\'on veut cr\xe9er.\\n\\nDonc pour \xe7a faut aller dans **Body** et s\xe9lectionner *raw* et c\'est l\xe0 dedans qu\'on va pouvoir personnaliser notre premier pc cr\xe9er via l\'API.\\n\\net j\'ai ajout\xe9 cet input :\\n\\n    ```\\n    {\\n    \\"input\\": {\\n        \\"name\\": \\"pc test api\\",\\n        \\"users_id_tech\\": 4,\\n        \\"states_id\\": 1\\n        }\\n    }\\n    ```\\n\\nCe qui m\'a rendu ce r\xe9sultat :\\n![pc cr\xe9\xe9](./images/postman_creation_pc.png)\\n\\nDonc maintenant il ne reste plus qu\'\xe0 v\xe9rifier qu\'il est bien pr\xe9sent dans la liste des pc de GLPI.\\n\\n![pc cr\xe9\xe9 dans GLPI](./images/GLPI_pc.png)\\n\\n\xc7a y est ! Notre premier objet a \xe9t\xe9 cr\xe9\xe9 dans GLPI gr\xe2ce \xe0 l\'API !!\\n\\n### Modifier un \xe9l\xe9ment\\n\\nBon c\'est super, mais le but de l\'application c\'est aussi de pouvoir modifier des choses.\\n\\nPour modifier c\'est rien de bien compliqu\xe9, on va prendre l\'exact m\xeame URL que pour l\'ajout, on va modifier la commande par **PUT** et dans le body on va mettre ceci (en ayant rep\xe9r\xe9 l\'id de l\'objet que l\'on souhaite modifier ):\\n\\n    ```\\n    {\\n    \\"input\\": {\\n        \\"id\\": \\"6\\",\\n        \\"name\\": \\"pc test api modifi\xe9\\"\\n        }\\n    }\\n    ```\\n\\nUne fois la commande ex\xe9cut\xe9e, on devrait avoir un message comme suivant :\\n![pc modifi\xe9 dans GLPI](./images/GLPI_pc_update.png)\\n\\nEt pour v\xe9rifier que la commande a bien \xe9t\xe9 prise en compte, il suffit de se rendre dans GLPI.\\n![pc modifi\xe9 dans GLPI](./images/GLPI_pc_update2.png)\\n\\nEt voil\xe0 ! Je sais \xe0 pr\xe9sent :\\n- Me connecter \xe0 l\'API\\n- Ajouter un objet dans GLPI\\n- Et le modifier"},{"id":"host-son-site-sur-github","metadata":{"permalink":"/blog/host-son-site-sur-github","editUrl":"https://github.com/alfi67-git/alfi-website/blog/host-son-site-sur-github/index.md","source":"@site/blog/host-son-site-sur-github/index.md","title":"\ud83c\udf10 H\xe9berger son site gratuitement sur GitHub","description":"Il existe une solution pour h\xe9berger votre site web gratuitement avec GitHub, c\'est ce que nous allons apprendre \xe0 faire dans ce tutoriel.","date":"2024-05-22T15:28:00.000Z","tags":[{"inline":false,"label":"Github","permalink":"/blog/tags/github","description":"GitHub tag description."},{"inline":false,"label":"Web","permalink":"/blog/tags/web","description":"Les trucs sur le web c\'est l\xe0."}],"readingTime":2.8,"hasTruncateMarker":true,"authors":[{"name":"Alexandre FIDALGO","title":"J\'fais des trucs sur mon pc et mes serveurs","socials":{"github":"https://github.com/alfi67-git","linkedin":"https://www.linkedin.com/in/alexandre-fidalgo/","email":"mailto:a.fidalgo.contact@gmail.com"},"imageURL":"https://github.com/alfi67-git.png","key":"alfi","page":null}],"frontMatter":{"slug":"host-son-site-sur-github","title":"\ud83c\udf10 H\xe9berger son site gratuitement sur GitHub","authors":["alfi"],"tags":["github","web"],"date":"2024-05-22T15:28"},"unlisted":false,"prevItem":{"title":"\ud83c\udf93 Projet de Fin d\'\xc9tude | Utilisation de Postman","permalink":"/blog/pfe-premier-pas"},"nextItem":{"title":"\ud83d\udc4b Hello World","permalink":"/blog/hello-world"}},"content":"Il existe une solution pour h\xe9berger votre site web gratuitement avec GitHub, c\'est ce que nous allons apprendre \xe0 faire dans ce tutoriel.\\n\\n\x3c!--truncate--\x3e\\n\\n## Mise en place du repository\\nDans un premier temps, rendez-vous sur Github et au niveau de votre photo de profil, cliquer sur le + et cr\xe9ez un nouveau repo.\\n\\n![new-repo](./images/new-repo.png)\\n\\nUne nouvelle page appara\xeet ensuite, votre repo doit avoir le nom *username*.github.io, faite \xe9galement en sorte qu\'il soit *public*. Vous pouvez donner une description \xe0 votre repository, mais \xe7a n\'est pas obligatoire.\\n\\n![name-repo](./images/name-repo.png)\\n\\n\xc0 pr\xe9sent, il faut push votre dossier sur lequel vous avez durement travaill\xe9. \\n\\n## Mise en ligne du site\\n\\nUne fois votre repo cr\xe9\xe9 et vos fichier upload\xe9s, il est temps de publier votre site.\\n\\nDans les param\xe8tres, rendez-vous dans la partie *pages*.\\n\\n![pages-github](./images/settings-repo.png)\\n\\nDans la partie **Build and deployment** s\xe9lectionnez la *Source*, qui est: \\n\\n- soit *GitHub Actions* \\n- soit *Deploy from a branch*\\n\\n\xc0 vous de s\xe9lectionner le bon en fonction de votre configuration, mais dans la majorit\xe9 des cas \xe7a sera la deuxi\xe8me option.\\n\\nS\xe9lectionnez \xe9galement la *Branch* de votre repo et sauvegardez. Dans quelques instant, un message vous disant que votre site est publi\xe9 devrait appara\xeetre.\\n\\n![site-published](./images/site_published.png)\\n\\nEt voil\xe0 ! Votre site est publi\xe9 ! Vous pouvez le partager au monde entier !\\n\\n\\n## Nom de domaine personnalis\xe9\\n\\nVotre site est publi\xe9, c\'est tr\xe8s chouette, mais vous n\'\xeates pas tr\xe8s satisfait du nom de domaine par d\xe9faut donn\xe9 par GitHub. Pas de panique, vous pouvez le changer, et ceci tr\xe8s facilement !\\n\\nSi vous avez achet\xe9 un nom de domaine aupr\xe8s d\'un fournisseur, vous pouvez pr\xe9ciser \xe0 GitHub le nom de domaine de votre souhait.\\n\\nPour ce faire, vous devez faire quelques ajouts au niveau de votre fournisseur. \\n\\nIci, nous prendrons le cas d\'OVH puisque c\'est celui que j\'utilise, mais les ajouts \xe0 faire sont les m\xeames peu importe le fournisseur.\\n\\n### D\xe9finir le nom de domaine\\n\\nAvant tout, il est recommand\xe9 de renseigner votre nom de domaine avant de proc\xe9der aux divers ajouts. Une fois renseigner, cliquez sur *Save* et attendez quelques secondes que la v\xe9rification DNS s\'effectue.\\n\\n![site-published](./images/subdomain.png)\\n\\n\\n### Configurer la r\xe9solution de nom\\nIl \xe0 pr\xe9sent temps de voir un oeil au niveau de la configuration de notre nom de domaine.\\n\\nRendez-vous sur le site de votre fournisseur de nom de domaine, s\xe9lectionnez votre nom de domaine et rajoutez une nouvelle entr\xe9e.\\n\\n1. S\xe9lectionnez le champ **A** (qui permet d\'associer un nom de domaine \xe0 une adresse IP)\\n2. D\xe9finissez en cible les serveurs de GitHub (plusieurs sont possibles, mais un seul suffis)\\n\\n    2.1. Laissez le sous domaine vide\\n\\n    2.2. D\xe9finissez la cible comme `185.199.108.153`\\n![ajout d\'une zone](./images/zone-A.png)\\n\\n3. Ajouter un **CNAME** (similaire au champ A, mais permet de d\xe9finir un nom alternatif) \\n\\n    3.1. D\xe9finissez le sous domaine comme `www`\\n\\n    3.2. D\xe9finissez la cible comme `pseudogit.github.io`\\n\\n![ajout d\'une zone](./images/CNAME.png)\\n\\nEt si vous retournez sur GitHub vous devrez avoir un message tout en haut de la page vous pr\xe9cisant que votre site est bien publi\xe9 et fonctionne avec le nom de domaine affili\xe9.\\n\\n![site web publi\xe9](./images/published2.png)\\n\\nEt voil\xe0, votre site est publi\xe9 avec un nom de domaine personnalis\xe9, le tout gratuitement !\\n\\n![bravo vous \xeates sur internet](./images/bravo.gif)\\n\\n\xc0 bient\xf4t pour de nouvelles aventures sur les internets \ud83e\udd13 !"},{"id":"hello-world","metadata":{"permalink":"/blog/hello-world","editUrl":"https://github.com/alfi67-git/alfi-website/blog/2024-05-20-hello-world.md","source":"@site/blog/2024-05-20-hello-world.md","title":"\ud83d\udc4b Hello World","description":"Le tout premier article du site \ud83d\ude04 !","date":"2024-05-20T00:00:00.000Z","tags":[],"readingTime":0.28,"hasTruncateMarker":false,"authors":[{"name":"Alexandre FIDALGO","title":"J\'fais des trucs sur mon pc et mes serveurs","socials":{"github":"https://github.com/alfi67-git","linkedin":"https://www.linkedin.com/in/alexandre-fidalgo/","email":"mailto:a.fidalgo.contact@gmail.com"},"imageURL":"https://github.com/alfi67-git.png","key":"alfi","page":null}],"frontMatter":{"slug":"hello-world","title":"\ud83d\udc4b Hello World","authors":["alfi"]},"unlisted":false,"prevItem":{"title":"\ud83c\udf10 H\xe9berger son site gratuitement sur GitHub","permalink":"/blog/host-son-site-sur-github"}},"content":"Le tout premier article du site \ud83d\ude04 !\\n\\nBonjour \xe0 toi qui lis \xe7a, t\'auras pas grand-chose \xe0 lire pour le moment puisque ceci n\'est que le tout premier article du site, mais d\'autres sont \xe0 pr\xe9voir.\\n\\nJe pense que je partagerais mes projets, des petits tutos, mes d\xe9couvertes ou l\'avancement de mon apprentissage sur diverses choses.."}]}}')}}]);